#!/usr/bin/env python


import numpy as np
import click

from collections import defaultdict, Counter
from mpi4py import MPI

from hol.job import Job
from hol.corpus import Corpus
from hol.volume import Volume
from hol.models import Count



class IndexCountJob(Job):


    def __init__(self, *args, **kwargs):

        """
        Initialize the merged counter.
        """

        super().__init__(*args, **kwargs)

        self.cache = defaultdict(Counter)


    def process(self, paths):

        """
        Accumulate counts for a set of paths.

        Args:
            paths (list)

        Returns: defaultdict(Counter)
        """

        result = defaultdict(Counter)

        for i, path in enumerate(paths):

            try:

                vol = Volume.from_path(path)

                if vol.is_english:
                    result[vol.year] += vol.token_counts()

            except Exception as e:
                print(e)

        return result


    def merge(self, result):

        """
        Merge in a batch of counts from a rank.

        Args:
            result (dict)
        """

        for year, counts in result.items():
            self.cache[year] += counts


    def flush(self):

        """
        Increment database counters.
        """

        Count.flush(self.cache)

        self.cache.clear()



@click.command()

@click.option(
    '--group_size',
    help='Process the corpus in groups of N paths.',
    default=1000,
)

def index_count(group_size):

    """
    Index year -> token -> count.
    """

    job = IndexCountJob(group_size)

    job.run()



if __name__ == '__main__':
    index_count()
